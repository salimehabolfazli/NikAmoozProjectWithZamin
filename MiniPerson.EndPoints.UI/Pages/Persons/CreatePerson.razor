@page "/create"
@page "/edit/{Id}"
@using WebLog.EndPoints.UI.DTOs.People
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject IConfiguration Configuration
<p>@Title</p>
<hr />
<hr />
<div class="container">
    <EditForm Model="@createPerson" OnValidSubmit="@CreatePersonFunction">
        <div class="row">
            <div class="col-md-8">
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="firstName">First Name #</label>
                        <input type="text" class="form-control" id="firstName" @bind-value="@createPerson.FirstName" placeholder="enter first name..." />
                        <ValidationMessage For="@(()=>createPerson.FirstName)" />
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="lastName">Last Name #</label>
                        <input type="text" class="form-control" id="lastName" @bind-value="@createPerson.LastName" placeholder="enter last name..." />
                        <ValidationMessage For="@(()=>createPerson.LastName)" />
                    </div>
                </div>
                <button type="submit" class="btn btn-info" Style="margin-top:10px">@ButtonText</button>
            </div>
        </div>
    </EditForm>
</div>
@code {
    [Parameter]
    public string Id { get; set; }
    private string Title { get; set; } = "Add";
    private string ButtonText { get; set; } = "Add User";
    CreatePersonCommand createPerson = new CreatePersonCommand();
    private string baseUrl = "";
    private HttpClient httpClient = new HttpClient();
    protected override async Task OnInitializedAsync()
    {
        baseUrl = Configuration["baseUrl"];
        if (Id != null)
        {
            Title = "Edit Person Page";
            ButtonText = "Edit User";
            createPerson = await httpClient.GetFromJsonAsync<CreatePersonCommand>(baseUrl + "api/PersonQuery/GetPersonById?GetPersonById=" + Id);
        }
        else
        {
            Title = "Add Person Page";
            ButtonText = "Add User";

        }
    }
    async void CreatePersonFunction()
    {
        if (Id != null)
        {
            createPerson.PersonBusinessId = Guid.Parse(Id);
            var response = await httpClient.PutAsJsonAsync(baseUrl + "api/PersonCommand/Edit", createPerson);
        }
        else
        {
            var response2 = await httpClient.PostAsJsonAsync(baseUrl + "api/PersonCommand/Create", createPerson);
        }


        navigationManager.NavigateTo("people");
    }
}
